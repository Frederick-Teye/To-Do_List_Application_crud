import sqlite3
import os
from datetime import date

db_path = "to-do_list.db"


def main():
    if not os.path.exists(db_path):
        conn = None
        try:
            # create connection to db_file
            conn = sqlite3.connect(db_path)

            # create cursor object
            cur = conn.cursor()

            # sql statement to create To-do_list table
            sql = """CREATE TABLE "To-do_list" (
                        "To-do_ID" INTEGER PRIMARY KEY AUTOINCREMENT,
                        "Description" TEXT NOT NULL,
                        "DueDate" TEXT NOT NULL,
                        "DaysLeftOrOverdue" INTEGER NOT NULL,
                        "Priority" TEXT NOT NULL,
                        "PriorityNumber" INTEGER NOT NULL,
                        "Status" TEXT NOT NULL,
                        "StatusNumber" INTEGER NOT NULL
                    )"""

            # create To-do_list table
            cur.execute(sql)

            # commit changes
            conn.commit()
        except sqlite3.Error as err:
            # print error message generated by sql
            print(err)
        finally:
            # close connection if there was any
            if conn is not None:
                conn.close()
    else:
        # if the database file already exists, then update all the status and status number column
        update_status()
    menu()


def update_status():
    conn = None
    try:
        conn = sqlite3.connect(db_path)

        cur = conn.cursor()

        # read only To-do_ID and DueDate from each row in database for
        cur.execute("SELECT `To-do_ID`, `DueDate`, `Status` FROM `To-do_list`")

        # save the data in a variable
        results = cur.fetchall()

        # create a variable to hold updated values
        update = []

        if len(results) > 0:
            for row in results:
                days_remaining = date.fromisoformat(row[1]) - date.today()

                # save the outcome string into a list by splitting at where there are spaces
                days_remaining_list = days_remaining.__str__().split(" ")

                # if there are zero days the string that will be returned by
                # days_remaining.__str__() is '0:00:00' and if we treat that
                # the same way we are treating those that will return something
                # like '4 days, 0:00:00', we will be having issues, so we have
                # to check if the output of days_remaining.__str__().split(" ")[0]
                # is having a ":" in it, if it is we extract only the first character
                if ':' in days_remaining_list[0]:
                    days_remaining = int(days_remaining_list[0][0])
                else:
                    days_remaining = int(days_remaining_list[0])

                # if the status of the data is not completed
                # then update the status, while you updated days remaining too.
                # Put all these updates and To-do_ID into the update list

                if row[2] == "Completed":
                    abs_days_remaining = abs(days_remaining)
                    update.append((abs_days_remaining, "Completed", 4, row[0]))
                else:
                    if days_remaining < 0:
                        abs_days_remaining = abs(days_remaining)
                        update.append((abs_days_remaining, "Overdue", 3, row[0]))
                    elif days_remaining == 0:
                        update.append((days_remaining, "In progress", 2, row[0]))
                    else:
                        update.append((days_remaining, "Pending", 1, row[0]))

            # update all the rows in the database.
            for row in update:
                cur.execute("""UPDATE `To-do_list`
                               SET `DaysLeftOrOverdue` = ?,
                                   `Status` = ?,
                                   `StatusNumber` = ?
                               WHERE `To-do_ID` == ?""",
                            row)

            # commit all changes
            conn.commit()
    except sqlite3.Error as err:
        # print error message generated by sql
        print("SQLite Message:", err)
    except ValueError as err2:
        print("Python Error message:", err2)
    finally:
        # close connection if there was any
        if conn is not None:
            conn.close()


def menu():
    print("        To-Do List Menu       \n"
          "------------------------------")
    option = input("1. Add new to-do item to list\n"
                   "2. View all to-do items in list\n"
                   "3. View a specific to-do item\n"
                   "4. Edit/Update a to-do item\n"
                   "5. Delete to-do item(s) in list\n"
                   "6. Exit application\n"
                   "Enter your choice: ")

    if option == "1":
        add_new_item()
    elif option == "2":
        view_items()
    elif option == "3":
        view_an_item()
    elif option == "4":
        update_a_list_item()
    elif option == "5":
        delete_item()
    elif option == "6":
        exit_application()
    else:
        print("\nInvalid input..."
              "\nPlease enter either 1, 2, 3, 4, 5 or 6")
        menu()


def item_status(days_left):
    days = int(days_left)
    if days < 0:
        return "Overdue"
    elif days == 0:
        return "In progress"
    else:
        return "Pending"


def days_lft(due_date):
    try:
        days_in_sentence = date.fromisoformat(due_date) - date.today()
        days = days_in_sentence.__str__().split(" ")
        return abs(int(days[0]))
    except ValueError as err:
        print()
        print(err)
        get_due_date()


def item_status_number(status):
    if status == "Pending":
        return 1
    elif status == "In progress":
        return 2
    else:
        return 3


def add_new_item():
    description = get_description()  # this function get the description from the user
    due_date = get_due_date()  # this function gets date from the user and return value

    days_left = days_lft(due_date)  # this function returns the number of days left

    status = item_status(days_left)  # return status of the item description

    status_number = item_status_number(status)  # returns the status number

    priority = ""
    priority_number = ""

    priority_dict = {"1": ["High", 1], "2": ["Medium", 2], "3": ["Low", 3]}

    priority_selection = input("1. Critical/High\n"
                               "2. Normal/Medium\n"
                               "3. Optional/Low\n"
                               "Enter your choice: ")

    while True:
        if priority_selection in priority_dict:
            priority = priority_dict[priority_selection][0]
            priority_number = priority_dict[priority_selection][1]
            break
        else:
            print("Invalid input...\n"
                  "Enter either 1, 2, or 3")
            priority_selection = input("1. Critical/High\n"
                                       "2. Normal/Medium\n"
                                       "3. Optional/Low\n"
                                       "Enter your choice: ")

    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()

        sql = """INSERT INTO 'To-do_list' ('Description', 'DueDate', 'DaysLeftOrOverDue',
                                         'Priority', 'PriorityNumber', 'Status', 'StatusNumber')
                                  VALUES(?, ?, ?, ?, ?, ?, ?)"""

        cur.execute(sql, (description, due_date, days_left, priority,
                          priority_number, status, status_number))

        # commit data added
        conn.commit()
    except sqlite3.Error as err:
        print(err)
    finally:
        # close connection
        if conn is not None:
            conn.close()

        # call menu function
        menu()


# define all the functions used in add_new_item()
# the operations that this functions perform will be needed in other functions,
# that is why I have put those operations inside a function so that they can
# be called whenever needed.


def get_due_date():
    print("\nAt this point, you will be asked to enter day, month, then year...")

    # get day
    day = input("\nEnter day: ").strip()
    while True:
        if day.isnumeric() and int(day) in range(1, 32):
            break
        else:
            print("\nYou can only enter numbers between 1 and 31")
            day = input("Enter day: ").strip()

    month = get_month()

    while True:
        year = input("Enter year: ")
        if len(year) == 4 and year.isnumeric() and int(year) >= date.today().year:
            return f"{year}-{month}-{day.zfill(2)}"
            # .zfill(2) is to pad the day with a zero if it is only a single digit
        else:
            print(f"You can't enter a year below {date.today().year} or non-numeric characters\n")


def get_month():
    months = {
        "1": "01", "Jan": "01",
        "2": "02", "Feb": "02",
        "3": "03", "Mar": "03",
        "4": "04", "Apr": "04",
        "5": "05", "May": "05",
        "6": "06", "Jun": "06",
        "7": "07", "Jul": "07",
        "8": "08", "Aug": "08",
        "9": "09", "Sep": "09",
        "10": "10", "Oct": "10",
        "11": "11", "Nov": "11",
        "12": "12", "Dec": "12"
    }

    while True:
        user_input = input("\nYou can enter the number or the three-letter abbreviation for the month \n"
                           "(e.g., '1' or 'Jan', '3' or 'Mar' or '11' or 'Nov'): ").strip().capitalize()

        if user_input in months:
            return months[user_input]
        else:
            print("Invalid input... Please enter a valid month or its number.")


def view_items():
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()

        cur.execute("SELECT * FROM 'To-do_list'")

        # save the output in a variable
        result = cur.fetchall()

        # check if there is any data in results before printing them
        if len(result) > 0:
            print("        Description            Due Date      Days Left/Overdue   Priority     Status\n"
                  "------------------------------------------------------------------------------------")
            for row in result:
                print(f"{row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
        else:
            print("To-do list is empty...")
    except sqlite3.Error as err:
        print(err)
    finally:
        # close connection
        if conn is not None:
            conn.close()

        # call the menu function, the user might need it
        print()
        menu()


def view_an_item():
    while True:
        user_choice = input("\n1. Search by inputting the description\n"
                            "2. Search list item(s) with a specific priority\n"
                            "3. Search list item(s) with a specific status\n"
                            "Enter your choice: ").strip()
        choices = {"1": view_by_desc, "2": view_by_priority, "3": view_by_status}
        if user_choice in choices:
            choices[user_choice]()  # Call the function based on user input
            break
        else:
            print("Wrong input... Enter 1, 2, or 3")


def view_by_desc():
    user_choice = input("\nSearch by entering characters that...\n"
                        "1. Start the description\n"
                        "2. End the description\n"
                        "3. Are somewhere in the description/make up the description\n"
                        "Enter your choice: ").strip()
    if user_choice == "1":
        input_start_str = input("Enter the characters that starts the description: ").strip().lower()
        start_str = input_start_str + "%"
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE lower(Description) LIKE ?""",
                        (start_str,))
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no description that has such characters as it beginning characters")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()

    elif user_choice == "2":
        input_end_str = input("Enter the characters that end of the description: ").strip().lower()
        end_str = f"%{input_end_str}"
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE lower(Description) LIKE ?""",
                        (end_str,))
            result = cur.fetchall()

            # check if there is any data in results before printing them
            print()
            print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                  "------------------------------------------------------------------------------------------")
            for row in result:
                print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no description that has those characters at the end")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    elif user_choice == "3":
        input_a_str = input("Enter the characters that are somewhere in the "
                            "description/make up the description: ").strip().lower()
        a_str = f"%{input_a_str}%"
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE lower(Description) LIKE ?""",
                        (a_str,))
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no description those characters in it...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    else:
        print("Invalid input... Enter 1, 2, 3 or 4...")
        view_by_desc()


def view_by_priority():
    print("\nList items with what priority do you want to view?")
    user_choice = input("\n1. Critical/High\n"
                        "2. Normal/Medium\n"
                        "3. Optional/Low\n"
                        "Enter your choice:  ")

    if user_choice == "1":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Priority == 'High'""")
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a Critical/High priority...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    if user_choice == "2":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Priority == 'Medium'""")
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a Normal/Medium priority...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    if user_choice == "3":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Priority == 'Low'""")
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a Optional/Low priority...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()


def view_by_status():
    user_choice = input("\n1. View pending to-do items\n"
                        "2. View to-do items that are in progress\n"
                        "3. View to-do items that are overdue\n"
                        "Enter your choice here: ").strip()
    if user_choice == "1":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Status == "Pending" """)
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a pending status...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    elif user_choice == "2":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Status == "In progress" """)
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a status 'In progress'...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    elif user_choice == "3":
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("""SELECT * FROM "To-do_list" WHERE Status == "Overdue" """)
            result = cur.fetchall()

            # check if there is any data in results before printing them
            if len(result) > 0:
                print()
                print("ID No.      Description             Due Date      Days Left/Overdue    Priority     Status\n"
                      "------------------------------------------------------------------------------------------")
                for row in result:
                    print(f"{row[0]:<4} {row[1]:30} {row[2]:15} {row[3]:6} {row[4]:>18} {row[6]:>12}")
            else:
                print("There is no To-do item that has a status 'Overdue'...")
        except sqlite3.Error as err:
            print(err)
        finally:
            # close connection
            if conn is not None:
                conn.close()

            # call the menu function, the user might need it
            print()
            will_you = input("Hit enter key to continue or 'm' to go to main menu: ").strip().lower()
            if will_you == "m":
                print()
                menu()
    else:
        print("Invalid input... Enter only 1, 2 or 3")
        view_by_status()


def update_a_list_item():
    user_choice = input("\n1. Update a description\n"
                        "2. Update due date\n"
                        "3. Update priority\n"
                        "4. Mark status completed\n"
                        "Enter your choice here: ").strip()

    if user_choice == "1":
        print("To update a description, you need to search for the item,\n"
              "Select the item ID and then Go ahead and update it description")
        view_an_item()
        print()
        id_chosen = input("Enter ID No. of the item you want to change it description: ").strip()
        while True:
            if id_chosen.isnumeric():
                break
            else:
                print("You have to enter a number...")
                id_chosen = input("Enter ID No. of the item you want to change it description: ").strip()
        update_description(int(id_chosen))
    elif user_choice == "2":
        print("To update a due date, you need to search for the item,\n"
              "Select the item ID and then Go ahead and update it due date")
        view_an_item()
        print()
        id_chosen = input("Enter ID No. of the item you want to change it date: ").strip()
        while True:
            if id_chosen.isnumeric():
                break
            else:
                print("You have to enter a number...")
                id_chosen = input("Enter ID No. of the item you want to change it date: ").strip()
        update_due_date(int(id_chosen))
    elif user_choice == "3":
        print("To update a priority, you need to search for the item,\n"
              "Select the item ID and then Go ahead and update it priority")
        view_an_item()
        print()
        id_chosen = input("Enter ID No. of the item you want to change it priority: ").strip()
        while True:
            if id_chosen.isnumeric():
                break
            else:
                print("You have to enter a number...")
                id_chosen = input("Enter ID No. of the item you want to change it priority: ").strip()
        update_priority(int(id_chosen))
    elif user_choice == "4":
        print("To update a status, you need to search for the item,\n"
              "Select the item ID and then Go ahead and update it status")
        view_an_item()
        print()
        id_chosen = input("Enter ID No. of an item, for it status to be marked completed: ").strip()
        while True:
            if id_chosen.isnumeric():
                break
            else:
                print("You have to enter a number...")
                id_chosen = input("Enter ID No. of the item you want to change it priority: ").strip()
        mark_status_complete(int(id_chosen))
    else:
        print("Invalid input... Enter 1, 2 or 3")
        update_a_list_item()


def update_description(id_chosen):
    # first of all, check if there is such ID in the table in the database
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("SELECT * FROM `To-do_list` WHERE `To-do_ID` = ?", (id_chosen,))

        # save the result in a variable
        result = cur.fetchall()

        # check if there is something in result
        if len(result) > 0:
            # then we can change the description
            new_description = get_description()
            cur.execute("""UPDATE `To-do_list`
                           SET Description = ?
                           WHERE `To-do_ID` == ?""",
                        (new_description, id_chosen))
            conn.commit()
            print(f"\nTo-do item with ID {id_chosen} have successfully been changed...\n")
        else:
            # if the is no item in the variable result
            print("To-do item with such ID not found...\n")
            go_back = input("Enter 'b' to go back to update list item menu,\n"
                            "'m' to go to main menu or enter key to quit: ").strip().lower()
            if go_back == 'b':
                update_a_list_item()
            elif go_back == 'm':
                menu()
    except sqlite3.Error as err:
        print()
        print("SQLite error:", err)
    finally:
        if conn is not None:
            conn.close()
            go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
            if go_to_menu == "m":
                menu()


def update_due_date(id_chosen):
    # first of all, check if there is such ID in the table in the database
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("SELECT * FROM `To-do_list` WHERE `To-do_ID` = ?", (id_chosen,))

        # save the result in a variable
        result = cur.fetchall()

        # check if there is something in result
        if len(result) > 0:
            # then we can change the date
            print("New you can change the date...")
            new_date = get_due_date()
            cur.execute("""UPDATE `To-do_list`
                           SET DueDate = ?
                           WHERE `To-do_ID` == ?""",
                        (new_date, id_chosen))
            conn.commit()

            # this can cause the status to be moved from overdue to pending,
            # so lets call the update_status function
            update_status()

            print(f"\nTo-do item with ID {id_chosen} have successfully been changed...\n")
        else:
            # if the is no item in the variable result
            print("To-do item with such ID not found...\n")
            go_back = input("Enter 'b' to go back to update list item menu,\n"
                            "'m' to go to main menu or enter key to quit: ").strip().lower()
            if go_back == 'b':
                update_a_list_item()
            elif go_back == 'm':
                menu()
    except sqlite3.Error as err:
        print()
        print("SQLite error:", err)
    finally:
        if conn is not None:
            conn.close()
            go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
            if go_to_menu == "m":
                menu()


def update_priority(id_chosen):
    # first of all, check if there is such ID in the table in the database
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("SELECT * FROM `To-do_list` WHERE `To-do_ID` = ?", (id_chosen,))

        # save the result in a variable
        result = cur.fetchall()

        # check if there is something in result
        if len(result) > 0:
            while True:
                priority_dict = {"1": "High", "2": "Medium", "3": "Low"}
                # then we can change the priority
                priority_choice = input("\n1. Critical/High\n"
                                        "2. Normal/Medium\n"
                                        "3. Optional/Low\n"
                                        "Enter your choice: ").strip()
                if priority_choice in priority_dict:
                    cur.execute("""UPDATE `To-do_list`
                                       SET Priority = ?
                                       WHERE `To-do_ID` == ?""",
                                (priority_dict[priority_choice], id_chosen))
                    conn.commit()
                    print(f"\nTo-do item with ID {id_chosen} have successfully been changed...\n")
                    break
                else:
                    print("Invalid input... Enter 1, 2 or 3...\n")
        else:
            # if the is no item in the variable result
            print("To-do item with such ID not found...\n")
            go_back = input("Enter 'b' to go back to update list item menu,\n"
                            "'m' to go to main menu or enter key to quit: ").strip().lower()
            if go_back == 'b':
                update_a_list_item()
            elif go_back == 'm':
                menu()
    except sqlite3.Error as err:
        print()
        print("SQLite error:", err)
    finally:
        if conn is not None:
            conn.close()
            go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
            if go_to_menu == "m":
                menu()


def delete_item():
    user_choice = input("\n1. Delete an item\n"
                        "2. Delete all items\n"
                        "Enter your choice: ").strip()
    if user_choice == "1":
        delete_an_item()
    elif user_choice == "2":
        delete_all_items()
    else:
        want_to_quit = input("Hit enter key to quit or m to go to main menu: ").strip().lower()
        if want_to_quit == "m":
            menu()


def delete_an_item():
    print("To delete an item, you have to search for it,\n"
          "Select it ID number and confirm to delete it")

    view_an_item()  # to view an item to delete
    print()
    id_chosen = input("Enter ID No. of the item you want to change it delete: ").strip()
    while True:
        if id_chosen.isnumeric():
            break
        else:
            print("You have to enter a number...")
            id_chosen = input("Enter ID No. of the item you want to change it description: ").strip()

    # first of all, check if there is such ID in the table in the database
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        id_chosen_int = int(id_chosen)
        cur.execute("SELECT * FROM `To-do_list` WHERE `To-do_ID` = ?", (id_chosen_int,))

        # save the result in a variable
        result = cur.fetchall()

        # check if there is something in result
        if len(result) > 0:
            # then we can change the description
            delete_decision = input("Are you sure you want to delete the item? (y/n): ").strip().lower()
            if delete_decision == "y":
                cur.execute("""DELETE FROM `To-do_list`
                               WHERE `To-do_ID` == ?""",
                            (id_chosen_int,))
                conn.commit()
                print(f"\nTo-do item with ID {id_chosen} have successfully been deleted...\n")
        else:
            # if the is no item in the variable result
            print("To-do item with such ID not found...\n")
            go_back = input("Enter 'b' to go back to update list item menu,\n"
                            "'m' to go to main menu or enter key to quit: ").strip().lower()
            if go_back == 'b':
                update_a_list_item()
            elif go_back == 'm':
                menu()
    except sqlite3.Error as err:
        print()
        print("SQLite error:", err)
    finally:
        if conn is not None:
            conn.close()
            go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
            if go_to_menu == "m":
                menu()


def delete_all_items():
    are_you_sure = input("Are you sure you want to delete all items in To-do_list? (y/n): ").strip().lower()
    if are_you_sure == 'y':
        conn = None
        try:
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("DELETE FROM `To-do_list`")
            are_you_sure = input("Are you sure you want to delete all items in To-do_list? (y/n): ").strip().lower()
            if are_you_sure == 'y':
                conn.commit()
                print("All items in To do list have successfully been deleted...")
        except sqlite3.Error as err:
            print()
            print("SQLite error:", err)
        finally:
            if conn is not None:
                conn.close()
                go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
                if go_to_menu == "m":
                    menu()


def exit_application():
    print("\nThanks for running this code... \nGoodbye...")


def get_description():
    while True:
        print("You can only enter 25 characters for a description...\n")
        description = input("Enter your description here: ").strip()

        if len(description) > 25:
            new_description = description[:24] + "..."
            print(f"The description you entered is too long and has been modified to:\n{new_description}")
            is_okay = input("\nAre you okay with the modified description? (y/n): ").strip().lower()
            if is_okay == "y":
                return new_description
        else:
            return description


def mark_status_complete(id_chosen):
    # first of all, check if there is such ID in the table in the database
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("SELECT * FROM `To-do_list` WHERE `To-do_ID` = ?", (id_chosen,))

        # save the result in a variable
        result = cur.fetchall()

        # check if there is something in result
        if len(result) > 0:
            # then we can change the description
            new_status = "Completed"
            cur.execute("""UPDATE `To-do_list`
                               SET Status = ?
                               WHERE `To-do_ID` == ?""",
                        (new_status, id_chosen))
            are_you = input(f"Are you sure you want to mark status of "
                            f"item {id_chosen} as completed? (y/n): ").strip().lower()
            if are_you == "y":
                conn.commit()
                print(f"\nTo-do item with ID {id_chosen} have successfully been marked completed...\n")
        else:
            # if the is no item in the variable result
            print("To-do item with such ID not found...\n")
            go_back = input("Enter 'b' to go back to update list item menu,\n"
                            "'m' to go to main menu or enter key to quit: ").strip().lower()
            if go_back == 'b':
                update_a_list_item()
            elif go_back == 'm':
                menu()
    except sqlite3.Error as err:
        print()
        print("SQLite error:", err)
    finally:
        if conn is not None:
            conn.close()
            go_to_menu = input("Hit enter key to quit application or 'm' to go to main menu: ").strip().lower()
            if go_to_menu == "m":
                menu()


if __name__ == "__main__":
    main()
